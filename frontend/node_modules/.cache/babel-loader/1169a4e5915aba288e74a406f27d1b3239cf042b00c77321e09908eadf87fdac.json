{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  jobs: [],\n  currentJob: null,\n  loading: false,\n  error: null,\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0,\n    pages: 0\n  },\n  filters: {\n    title: '',\n    location: '',\n    type: '',\n    status: 'active'\n  }\n};\nconst jobsSlice = createSlice({\n  name: 'jobs',\n  initialState,\n  reducers: {\n    fetchJobsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchJobsSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload.jobs;\n      state.pagination = action.payload.pagination;\n    },\n    fetchJobsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchJobStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchJobSuccess: (state, action) => {\n      state.loading = false;\n      state.currentJob = action.payload.job;\n    },\n    fetchJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createJobStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    createJobSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs.unshift(action.payload.job);\n    },\n    createJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateJobStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateJobSuccess: (state, action) => {\n      state.loading = false;\n      const index = state.jobs.findIndex(job => job.id === action.payload.job.id);\n      if (index !== -1) {\n        state.jobs[index] = action.payload.job;\n      }\n      if (state.currentJob && state.currentJob.id === action.payload.job.id) {\n        state.currentJob = action.payload.job;\n      }\n    },\n    updateJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteJobStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteJobSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs = state.jobs.filter(job => job.id !== action.payload);\n      if (state.currentJob && state.currentJob.id === action.payload) {\n        state.currentJob = null;\n      }\n    },\n    deleteJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n      state.pagination.page = 1; // Reset to first page when filters change\n    },\n    clearFilters: state => {\n      state.filters = initialState.filters;\n      state.pagination.page = 1;\n    },\n    setPage: (state, action) => {\n      state.pagination.page = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    clearCurrentJob: state => {\n      state.currentJob = null;\n    }\n  }\n});\nexport const {\n  fetchJobsStart,\n  fetchJobsSuccess,\n  fetchJobsFailure,\n  fetchJobStart,\n  fetchJobSuccess,\n  fetchJobFailure,\n  createJobStart,\n  createJobSuccess,\n  createJobFailure,\n  updateJobStart,\n  updateJobSuccess,\n  updateJobFailure,\n  deleteJobStart,\n  deleteJobSuccess,\n  deleteJobFailure,\n  setFilters,\n  clearFilters,\n  setPage,\n  clearError,\n  clearCurrentJob\n} = jobsSlice.actions;\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","jobs","currentJob","loading","error","pagination","page","limit","total","pages","filters","title","location","type","status","jobsSlice","name","reducers","fetchJobsStart","state","fetchJobsSuccess","action","payload","fetchJobsFailure","fetchJobStart","fetchJobSuccess","job","fetchJobFailure","createJobStart","createJobSuccess","unshift","createJobFailure","updateJobStart","updateJobSuccess","index","findIndex","id","updateJobFailure","deleteJobStart","deleteJobSuccess","filter","deleteJobFailure","setFilters","clearFilters","setPage","clearError","clearCurrentJob","actions","reducer"],"sources":["/Users/rigobert/Documents/ISCO/frontend/src/store/reducers/jobsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  jobs: [],\n  currentJob: null,\n  loading: false,\n  error: null,\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0,\n    pages: 0,\n  },\n  filters: {\n    title: '',\n    location: '',\n    type: '',\n    status: 'active',\n  },\n};\n\nconst jobsSlice = createSlice({\n  name: 'jobs',\n  initialState,\n  reducers: {\n    fetchJobsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchJobsSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload.jobs;\n      state.pagination = action.payload.pagination;\n    },\n    fetchJobsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchJobStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchJobSuccess: (state, action) => {\n      state.loading = false;\n      state.currentJob = action.payload.job;\n    },\n    fetchJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createJobStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    createJobSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs.unshift(action.payload.job);\n    },\n    createJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateJobStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateJobSuccess: (state, action) => {\n      state.loading = false;\n      const index = state.jobs.findIndex(job => job.id === action.payload.job.id);\n      if (index !== -1) {\n        state.jobs[index] = action.payload.job;\n      }\n      if (state.currentJob && state.currentJob.id === action.payload.job.id) {\n        state.currentJob = action.payload.job;\n      }\n    },\n    updateJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteJobStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteJobSuccess: (state, action) => {\n      state.loading = false;\n      state.jobs = state.jobs.filter(job => job.id !== action.payload);\n      if (state.currentJob && state.currentJob.id === action.payload) {\n        state.currentJob = null;\n      }\n    },\n    deleteJobFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setFilters: (state, action) => {\n      state.filters = { ...state.filters, ...action.payload };\n      state.pagination.page = 1; // Reset to first page when filters change\n    },\n    clearFilters: (state) => {\n      state.filters = initialState.filters;\n      state.pagination.page = 1;\n    },\n    setPage: (state, action) => {\n      state.pagination.page = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    clearCurrentJob: (state) => {\n      state.currentJob = null;\n    },\n  },\n});\n\nexport const {\n  fetchJobsStart,\n  fetchJobsSuccess,\n  fetchJobsFailure,\n  fetchJobStart,\n  fetchJobSuccess,\n  fetchJobFailure,\n  createJobStart,\n  createJobSuccess,\n  createJobFailure,\n  updateJobStart,\n  updateJobSuccess,\n  updateJobFailure,\n  deleteJobStart,\n  deleteJobSuccess,\n  deleteJobFailure,\n  setFilters,\n  clearFilters,\n  setPage,\n  clearError,\n  clearCurrentJob,\n} = jobsSlice.actions;\n\nexport default jobsSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}