{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { jobsAPI } from '../../services/api';\nimport { FETCH_JOBS_REQUEST, FETCH_JOB_REQUEST, CREATE_JOB_REQUEST, UPDATE_JOB_REQUEST, DELETE_JOB_REQUEST } from '../actions';\nimport { fetchJobsStart, fetchJobsSuccess, fetchJobsFailure, fetchJobStart, fetchJobSuccess, fetchJobFailure, createJobStart, createJobSuccess, createJobFailure, updateJobStart, updateJobSuccess, updateJobFailure, deleteJobStart, deleteJobSuccess, deleteJobFailure } from '../reducers/jobsSlice';\n\n// Fetch jobs saga\nfunction* fetchJobsSaga(action) {\n  try {\n    yield put(fetchJobsStart());\n    const response = yield call(jobsAPI.getJobs, action.payload);\n    yield put(fetchJobsSuccess(response.data));\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch jobs';\n    yield put(fetchJobsFailure(errorMessage));\n  }\n}\n\n// Fetch single job saga\nfunction* fetchJobSaga(action) {\n  try {\n    yield put(fetchJobStart());\n    const response = yield call(jobsAPI.getJob, action.payload);\n    yield put(fetchJobSuccess(response.data));\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch job';\n    yield put(fetchJobFailure(errorMessage));\n  }\n}\n\n// Create job saga\nfunction* createJobSaga(action) {\n  try {\n    yield put(createJobStart());\n    const response = yield call(jobsAPI.createJob, action.payload);\n    yield put(createJobSuccess(response.data));\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to create job';\n    yield put(createJobFailure(errorMessage));\n  }\n}\n\n// Update job saga\nfunction* updateJobSaga(action) {\n  try {\n    yield put(updateJobStart());\n    const {\n      id,\n      jobData\n    } = action.payload;\n    const response = yield call(jobsAPI.updateJob, id, jobData);\n    yield put(updateJobSuccess(response.data));\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to update job';\n    yield put(updateJobFailure(errorMessage));\n  }\n}\n\n// Delete job saga\nfunction* deleteJobSaga(action) {\n  try {\n    yield put(deleteJobStart());\n    yield call(jobsAPI.deleteJob, action.payload);\n    yield put(deleteJobSuccess(action.payload));\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to delete job';\n    yield put(deleteJobFailure(errorMessage));\n  }\n}\n\n// Jobs saga watcher\nexport default function* jobsSaga() {\n  yield takeLatest(FETCH_JOBS_REQUEST, fetchJobsSaga);\n  yield takeLatest(FETCH_JOB_REQUEST, fetchJobSaga);\n  yield takeLatest(CREATE_JOB_REQUEST, createJobSaga);\n  yield takeLatest(UPDATE_JOB_REQUEST, updateJobSaga);\n  yield takeLatest(DELETE_JOB_REQUEST, deleteJobSaga);\n}","map":{"version":3,"names":["takeLatest","call","put","jobsAPI","FETCH_JOBS_REQUEST","FETCH_JOB_REQUEST","CREATE_JOB_REQUEST","UPDATE_JOB_REQUEST","DELETE_JOB_REQUEST","fetchJobsStart","fetchJobsSuccess","fetchJobsFailure","fetchJobStart","fetchJobSuccess","fetchJobFailure","createJobStart","createJobSuccess","createJobFailure","updateJobStart","updateJobSuccess","updateJobFailure","deleteJobStart","deleteJobSuccess","deleteJobFailure","fetchJobsSaga","action","response","getJobs","payload","data","error","_error$response","_error$response$data","errorMessage","fetchJobSaga","getJob","_error$response2","_error$response2$data","createJobSaga","createJob","_error$response3","_error$response3$data","updateJobSaga","id","jobData","updateJob","_error$response4","_error$response4$data","deleteJobSaga","deleteJob","_error$response5","_error$response5$data","jobsSaga"],"sources":["/Users/rigobert/Documents/ISCO/frontend/src/store/sagas/jobsSaga.js"],"sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\nimport { jobsAPI } from '../../services/api';\nimport {\n  FETCH_JOBS_REQUEST,\n  FETCH_JOB_REQUEST,\n  CREATE_JOB_REQUEST,\n  UPDATE_JOB_REQUEST,\n  DELETE_JOB_REQUEST,\n} from '../actions';\nimport {\n  fetchJobsStart,\n  fetchJobsSuccess,\n  fetchJobsFailure,\n  fetchJobStart,\n  fetchJobSuccess,\n  fetchJobFailure,\n  createJobStart,\n  createJobSuccess,\n  createJobFailure,\n  updateJobStart,\n  updateJobSuccess,\n  updateJobFailure,\n  deleteJobStart,\n  deleteJobSuccess,\n  deleteJobFailure,\n} from '../reducers/jobsSlice';\n\n// Fetch jobs saga\nfunction* fetchJobsSaga(action) {\n  try {\n    yield put(fetchJobsStart());\n    const response = yield call(jobsAPI.getJobs, action.payload);\n    yield put(fetchJobsSuccess(response.data));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Failed to fetch jobs';\n    yield put(fetchJobsFailure(errorMessage));\n  }\n}\n\n// Fetch single job saga\nfunction* fetchJobSaga(action) {\n  try {\n    yield put(fetchJobStart());\n    const response = yield call(jobsAPI.getJob, action.payload);\n    yield put(fetchJobSuccess(response.data));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Failed to fetch job';\n    yield put(fetchJobFailure(errorMessage));\n  }\n}\n\n// Create job saga\nfunction* createJobSaga(action) {\n  try {\n    yield put(createJobStart());\n    const response = yield call(jobsAPI.createJob, action.payload);\n    yield put(createJobSuccess(response.data));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Failed to create job';\n    yield put(createJobFailure(errorMessage));\n  }\n}\n\n// Update job saga\nfunction* updateJobSaga(action) {\n  try {\n    yield put(updateJobStart());\n    const { id, jobData } = action.payload;\n    const response = yield call(jobsAPI.updateJob, id, jobData);\n    yield put(updateJobSuccess(response.data));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Failed to update job';\n    yield put(updateJobFailure(errorMessage));\n  }\n}\n\n// Delete job saga\nfunction* deleteJobSaga(action) {\n  try {\n    yield put(deleteJobStart());\n    yield call(jobsAPI.deleteJob, action.payload);\n    yield put(deleteJobSuccess(action.payload));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Failed to delete job';\n    yield put(deleteJobFailure(errorMessage));\n  }\n}\n\n// Jobs saga watcher\nexport default function* jobsSaga() {\n  yield takeLatest(FETCH_JOBS_REQUEST, fetchJobsSaga);\n  yield takeLatest(FETCH_JOB_REQUEST, fetchJobSaga);\n  yield takeLatest(CREATE_JOB_REQUEST, createJobSaga);\n  yield takeLatest(UPDATE_JOB_REQUEST, updateJobSaga);\n  yield takeLatest(DELETE_JOB_REQUEST, deleteJobSaga);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}