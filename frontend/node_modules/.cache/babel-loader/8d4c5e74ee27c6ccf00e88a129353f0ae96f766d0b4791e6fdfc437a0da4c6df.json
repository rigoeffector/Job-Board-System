{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { authAPI } from '../../services/api';\nimport { LOGIN_REQUEST, REGISTER_REQUEST, LOGOUT_REQUEST, GET_PROFILE_REQUEST, UPDATE_PROFILE_REQUEST } from '../actions';\nimport { loginStart, loginSuccess, loginFailure, registerStart, registerSuccess, registerFailure, logout, updateProfile } from '../reducers/authSlice';\n\n// Login saga\nfunction* loginSaga(action) {\n  try {\n    console.log('Login saga started with payload:', action.payload);\n    yield put(loginStart());\n    console.log('Making API call to login endpoint...');\n    const response = yield call(authAPI.login, action.payload);\n    console.log('Login API response:', response.data);\n    yield put(loginSuccess(response.data));\n    console.log('Login success action dispatched');\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Login saga error:', error);\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed';\n    console.log('Dispatching login failure with message:', errorMessage);\n    yield put(loginFailure(errorMessage));\n  }\n}\n\n// Register saga\nfunction* registerSaga(action) {\n  try {\n    yield put(registerStart());\n    const response = yield call(authAPI.register, action.payload);\n    yield put(registerSuccess(response.data));\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed';\n    yield put(registerFailure(errorMessage));\n  }\n}\n\n// Logout saga\nfunction* logoutSaga() {\n  try {\n    yield put(logout());\n  } catch (error) {\n    console.error('Logout error:', error);\n  }\n}\n\n// Get profile saga\nfunction* getProfileSaga() {\n  try {\n    const response = yield call(authAPI.getProfile);\n    yield put(loginSuccess({\n      user: response.data.user,\n      token: localStorage.getItem('token')\n    }));\n  } catch (error) {\n    var _error$response3;\n    console.error('Get profile error:', error);\n    // If token is invalid, logout\n    if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n      yield put(logout());\n    }\n  }\n}\n\n// Update profile saga\nfunction* updateProfileSaga(action) {\n  try {\n    const response = yield call(authAPI.updateProfile, action.payload);\n    yield put(updateProfile(response.data.user));\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Profile update failed';\n    console.error('Update profile error:', errorMessage);\n  }\n}\n\n// Auth saga watcher\nexport default function* authSaga() {\n  yield takeLatest(LOGIN_REQUEST, loginSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n  yield takeLatest(LOGOUT_REQUEST, logoutSaga);\n  yield takeLatest(GET_PROFILE_REQUEST, getProfileSaga);\n  yield takeLatest(UPDATE_PROFILE_REQUEST, updateProfileSaga);\n}","map":{"version":3,"names":["takeLatest","call","put","authAPI","LOGIN_REQUEST","REGISTER_REQUEST","LOGOUT_REQUEST","GET_PROFILE_REQUEST","UPDATE_PROFILE_REQUEST","loginStart","loginSuccess","loginFailure","registerStart","registerSuccess","registerFailure","logout","updateProfile","loginSaga","action","console","log","payload","response","login","data","error","_error$response","_error$response$data","errorMessage","registerSaga","register","_error$response2","_error$response2$data","logoutSaga","getProfileSaga","getProfile","user","token","localStorage","getItem","_error$response3","status","updateProfileSaga","_error$response4","_error$response4$data","authSaga"],"sources":["/Users/rigobert/Documents/ISCO/frontend/src/store/sagas/authSaga.js"],"sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\nimport { authAPI } from '../../services/api';\nimport {\n  LOGIN_REQUEST,\n  REGISTER_REQUEST,\n  LOGOUT_REQUEST,\n  GET_PROFILE_REQUEST,\n  UPDATE_PROFILE_REQUEST,\n} from '../actions';\nimport {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  logout,\n  updateProfile,\n} from '../reducers/authSlice';\n\n// Login saga\nfunction* loginSaga(action) {\n  try {\n    console.log('Login saga started with payload:', action.payload);\n    yield put(loginStart());\n    \n    console.log('Making API call to login endpoint...');\n    const response = yield call(authAPI.login, action.payload);\n    console.log('Login API response:', response.data);\n    \n    yield put(loginSuccess(response.data));\n    console.log('Login success action dispatched');\n  } catch (error) {\n    console.error('Login saga error:', error);\n    const errorMessage = error.response?.data?.error || 'Login failed';\n    console.log('Dispatching login failure with message:', errorMessage);\n    yield put(loginFailure(errorMessage));\n  }\n}\n\n// Register saga\nfunction* registerSaga(action) {\n  try {\n    yield put(registerStart());\n    const response = yield call(authAPI.register, action.payload);\n    yield put(registerSuccess(response.data));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Registration failed';\n    yield put(registerFailure(errorMessage));\n  }\n}\n\n// Logout saga\nfunction* logoutSaga() {\n  try {\n    yield put(logout());\n  } catch (error) {\n    console.error('Logout error:', error);\n  }\n}\n\n// Get profile saga\nfunction* getProfileSaga() {\n  try {\n    const response = yield call(authAPI.getProfile);\n    yield put(loginSuccess({ user: response.data.user, token: localStorage.getItem('token') }));\n  } catch (error) {\n    console.error('Get profile error:', error);\n    // If token is invalid, logout\n    if (error.response?.status === 401) {\n      yield put(logout());\n    }\n  }\n}\n\n// Update profile saga\nfunction* updateProfileSaga(action) {\n  try {\n    const response = yield call(authAPI.updateProfile, action.payload);\n    yield put(updateProfile(response.data.user));\n  } catch (error) {\n    const errorMessage = error.response?.data?.error || 'Profile update failed';\n    console.error('Update profile error:', errorMessage);\n  }\n}\n\n// Auth saga watcher\nexport default function* authSaga() {\n  yield takeLatest(LOGIN_REQUEST, loginSaga);\n  yield takeLatest(REGISTER_REQUEST, registerSaga);\n  yield takeLatest(LOGOUT_REQUEST, logoutSaga);\n  yield takeLatest(GET_PROFILE_REQUEST, getProfileSaga);\n  yield takeLatest(UPDATE_PROFILE_REQUEST, updateProfileSaga);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}